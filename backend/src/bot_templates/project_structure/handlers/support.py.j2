from aiogram import types, filters, Router

import config
from db import support as support_db
from db import base as base_db
from loader import db_connector, bot

router = Router()


@router.message(filters.Command("support"))
async def send_support_request(message: types.Message, command: filters.CommandObject):
    if command.args is None:
        return await message.answer(
            "‚ùó –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É: /support [—Ç–µ–∫—Å—Ç]"
        )

    if len(command.args) > 512:
        return await message.answer(
            "‚ùó –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 512 —Å–∏–º–≤–æ–ª–æ–≤!"
        )

    await support_db.create_support_request(
        db_connector=db_connector,
        question=command.args,
        tg_id=message.from_user.id
    )
    await message.answer("‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")


@router.message(filters.Command("requests"))
async def get_opened_support_requests(message: types.Message):
    user = await base_db.get_user(db_connector, tg_id=message.from_user.id)
    if not user["is_admin"]:
        return

    support_requests = await support_db.get_open_support_requests(db_connector)

    if not support_requests:
        return await message.answer('‚ùó –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É!')

    string_support_requests = '\n\n'.join([
        f"ID {request['request_id']}: {request['question']}"
        for request in support_requests
    ])

    await message.answer(
        f"üìë –°–ø–∏—Å–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
        f"{string_support_requests}\n\n"
        "‚ùó –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤–≤–µ–¥–∏—Ç–µ: /answer [id –æ–±—Ä–∞—â–µ–Ω–∏—è] [—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞]"
    )


@router.message(filters.Command("answer"))
async def answer_to_support_request(message: types.Message, command: filters.CommandObject):
    user = await base_db.get_user(db_connector, tg_id=message.from_user.id)
    if not user["is_admin"]:
        return

    try:
        request_id, answer_text = command.args.split(" ", maxsplit=1)
    except (AttributeError, ValueError):
        return await message.answer(
            "‚ùó –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å id –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: /answer [id –æ–±—Ä–∞—â–µ–Ω–∏—è] [—Ç–µ–∫—Å—Ç]"
        )

    support_request = await support_db.get_support_request(db_connector, request_id)
    if not support_request or support_request['answer']:
        return await message.answer("‚ùó –û—Ç–∫—Ä—ã—Ç–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

    if len(answer_text) > 1024:
        return await message.answer(
            "‚ùó –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 1024 —Å–∏–º–≤–æ–ª–æ–≤!"
        )

    await support_db.save_answer_from_support(
        db_connector=db_connector,
        request_id=request_id,
        answer=answer_text,
        support_id=message.from_user.id,
    )

    await bot.send_message(
        chat_id=support_request["tg_id"],
        text="‚ùó –ü—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n"
             f"<i>{answer_text}</i>"
    )
    await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
