import aiogram.exceptions
from aiogram import types, filters, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

import config
from db import support as support_db
from db import base as base_db
from loader import db_connector, bot

router = Router()


@router.message(filters.StateFilter(None), filters.Command("support"))
async def send_support_request(message: types.Message, command: filters.CommandObject):
    if command.args is None:
        return await message.answer(
            "‚ùó –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É: /support [—Ç–µ–∫—Å—Ç]"
        )

    if len(command.args) > 512:
        return await message.answer(
            "‚ùó –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 512 —Å–∏–º–≤–æ–ª–æ–≤!"
        )

    await support_db.create_support_request(
        db_connector=db_connector,
        question=command.args,
        tg_id=message.from_user.id
    )
    await message.answer("‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")


@router.message(filters.StateFilter(None), filters.Command("requests"))
async def get_opened_support_requests(message: types.Message):
    user = await base_db.get_user(db_connector, tg_id=message.from_user.id)
    if not user["is_admin"]:
        return

    support_requests = await support_db.get_open_support_requests(db_connector)

    if not support_requests:
        return await message.answer('‚ùó –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É!')

    string_support_requests = '\n\n'.join([
        f"ID {request['request_id']}: {request['question']}"
        for request in support_requests
    ])

    await message.answer(
        f"üìë –°–ø–∏—Å–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
        f"{string_support_requests}\n\n"
        "‚ùó –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤–≤–µ–¥–∏—Ç–µ: /answer [id –æ–±—Ä–∞—â–µ–Ω–∏—è] [—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞]"
    )


@router.message(filters.StateFilter(None), filters.Command("answer"))
async def answer_to_support_request(message: types.Message, command: filters.CommandObject):
    user = await base_db.get_user(db_connector, tg_id=message.from_user.id)
    if not user["is_admin"]:
        return

    try:
        request_id, answer_text = command.args.split(" ", maxsplit=1)
    except (AttributeError, ValueError):
        return await message.answer(
            "‚ùó –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å id –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: /answer [id –æ–±—Ä–∞—â–µ–Ω–∏—è] [—Ç–µ–∫—Å—Ç]"
        )

    support_request = await support_db.get_support_request(db_connector, request_id)
    if not support_request or support_request['answer']:
        return await message.answer("‚ùó –û—Ç–∫—Ä—ã—Ç–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

    if len(answer_text) > 1024:
        return await message.answer(
            "‚ùó –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 1024 —Å–∏–º–≤–æ–ª–æ–≤!"
        )

    await support_db.save_answer_from_support(
        db_connector=db_connector,
        request_id=request_id,
        answer=answer_text,
        support_id=message.from_user.id,
    )

    await bot.send_message(
        chat_id=support_request["tg_id"],
        text="‚ùó –ü—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n"
             f"<i>{answer_text}</i>"
    )
    await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")


class OperatorState(StatesGroup):
    connect = State()


@router.message(filters.StateFilter(None), filters.Command("connect"))
async def connect_support_to_chat(
        message: types.Message,
        command: filters.CommandObject,
        state: FSMContext,
):
    user = await base_db.get_user(db_connector, tg_id=message.from_user.id)
    if not user["is_admin"]:
        return

    recipient_id = command.args
    if recipient_id is None:
        return await message.answer(
            "‚ùó –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫ —á–∞—Ç—É —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: "
            "/connect [id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]"
        )

    if not recipient_id.isdigit():
        return await message.answer(
            "‚ùó –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
        )

    recipient = await base_db.get_user(db_connector, int(recipient_id))
    if recipient is None:
        return await message.answer(
            "‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç-–±–æ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        )

    await state.set_state(OperatorState.connect)
    await state.update_data(recipient_id=recipient_id)
    await message.answer(
        "‚úÖ –í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —á–∞—Ç—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –¢–µ–ø–µ—Ä—å –∫–∞–∂–¥–æ–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —á–∞—Ç-–±–æ—Ç—É, "
        f"–±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º {recipient_id}\n\n"
        "‚ùó –ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –Ω–∞–ø–∏—à–∏—Ç–µ /exit"
    )


@router.message(filters.StateFilter(OperatorState.connect))
async def chat_with_user(message: types.Message, state: FSMContext):
    if message.text == '/exit':
        await state.clear()
        return await message.answer('‚úÖ –í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!')

    data = await state.get_data()
    try:
        await bot.send_message(
            chat_id=data["recipient_id"],
            text=f"‚ùó –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n"
                 f"<i>{message.text}</i>"
        )
    except aiogram.exceptions.TelegramForbiddenError:
        await message.answer(
            "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç.–∫. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —á–∞—Ç-–±–æ—Ç–∞\n\n"
            "‚úÖ –í—ã –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –æ—Ç —á–∞—Ç–∞ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        )
        await state.clear()


@router.message(filters.StateFilter(None), filters.Command('setadmin'))
async def set_admin(message: types.Message, command: filters.CommandObject,):
    user = await base_db.get_user(db_connector, tg_id=message.from_user.id)
    if not user["is_admin"]:
        return

    recipient_id = command.args
    if recipient_id is None:
        return await message.answer(
            "‚ùó –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        )

    if not recipient_id.isdigit():
        return await message.answer(
            "‚ùó –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
        )

    recipient = await base_db.get_user(db_connector, int(recipient_id))
    if recipient is None:
        return await message.answer(
            "‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç-–±–æ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        )

    if recipient["is_admin"]:
        return await message.answer(
            "‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!"
        )

    await support_db.set_admin(db_connector, int(recipient_id))
    await message.answer(f"‚úÖ –í—ã –≤—ã–¥–∞–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º {recipient_id}!")
    try:
        await bot.send_message(
            chat_id=int(recipient_id),
            text=f"‚úÖ –í–∞–º –≤—ã–¥–∞–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!"
        )
    except aiogram.exceptions.TelegramForbiddenError:
        await message.answer(
            "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç.–∫. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —á–∞—Ç-–±–æ—Ç–∞"
        )


@router.message(filters.StateFilter(None), filters.Command('unsetadmin'))
async def unset_admin(message: types.Message, command: filters.CommandObject,):
    user = await base_db.get_user(db_connector, tg_id=message.from_user.id)
    if not user["is_admin"]:
        return

    recipient_id = command.args
    if recipient_id is None:
        return await message.answer(
            "‚ùó –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        )

    if not recipient_id.isdigit():
        return await message.answer(
            "‚ùó –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
        )

    recipient = await base_db.get_user(db_connector, int(recipient_id))
    if recipient is None:
        return await message.answer(
            "‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç-–±–æ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        )

    if not recipient["is_admin"]:
        return await message.answer(
            "‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!"
        )

    if recipient_id == int(config.ADMIN_ID):
        return await message.answer(
            "‚ùå –ù–µ–ª—å–∑—è —Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!"
        )

    await support_db.unset_admin(db_connector, int(recipient_id))
    await message.answer(f"‚úÖ –í—ã –ª–∏—à–∏–ª–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º {recipient_id}!")
    try:
        await bot.send_message(
            chat_id=recipient_id,
            text=f"‚ùå –í–∞—Å –ª–∏—à–∏–ª–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!"
        )
    except aiogram.exceptions.TelegramForbiddenError:
        await message.answer(
            "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç.–∫. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —á–∞—Ç-–±–æ—Ç–∞"
        )
