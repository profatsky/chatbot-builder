import asyncio
import csv
import os
import re
import logging
import sys
from email.message import EmailMessage

import aiohttp
from aiogram import Bot, Dispatcher, types, filters, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiosmtplib import SMTP
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.environ.get('BOT_TOKEN')

EMAIL_HOST = os.environ.get('EMAIL_HOST')
EMAIL_PORT = os.environ.get('EMAIL_PORT')
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
EMAIL_GOOGLE_APP_PASSWORD = os.environ.get('EMAIL_GOOGLE_APP_PASSWORD')

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

{% for func in utils_funcs +%}
{{ func }}

{% endfor -%}

{% for states_group in states_groups +%}
class {{ states_group.name }}(StatesGroup):
    {% for state in states_group.states %}
    {{ state.name }} = State()
    {% endfor +%}
{% endfor -%}


{%for handler in handlers +%}
{{ handler.decorator }}
{{ handler.signature }}
    {% for body_str in handler.body %}
    {{ body_str }}
    {% endfor +%}
{% endfor %}

@dp.message(filters.CommandStart())
async def handler_command_start(message: types.Message):
{% if start_keyboard %}
    buttons = [
    {% for i in range(0, start_keyboard.buttons|length, 3) %}
        {% set buttons_slice = start_keyboard.buttons[i:i+3] %}
        [
        {% for button in buttons_slice %}
            {{ button }},
        {% endfor %}
        ],
    {% endfor %}
    ]
    start_keyboard = {{ start_keyboard.declaration }}
{% else %}
    start_keyboard = None
{% endif %}

    await message.answer(
        "{{ start_message }}",
        reply_markup=start_keyboard
    )


{% if commands_values %}
@dp.message(F.text, filters.Command('help'))
async def handler_get_commands(message: types.Message):
    message_text = 'Список доступных команд:\n\n'
    commands = {{ commands_values }}
    for command in commands:
        message_text += f'- {command}'

{% if buttons_values %}
    keyboard = main_menu_keyboard
{% else %}
    keyboard = None
{% endif %}

    await message.answer(
        message_text,
        reply_markup=keyboard
    )
{% endif %}


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
